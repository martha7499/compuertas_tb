`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 09.11.2024 17:44:40
// Design Name: 
// Module Name: contador
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

// Code your design here
// 2 procesos que randomizen (std::randomize) las a y b respectivamente ( 5 ciclos )
// imprimiendo con otros procesos concurrentes a, b, (and) cada flanco de reloj en el siguiente orden (1- and, 2- b, 3- a) ( 5 ciclos )

 

module tb_compuertas#(parameter WIDTH = 4);

 

  // Declaracion de variables //
  bit clk; 
  reg [WIDTH-1:0] a = 4'b0000;
  reg [WIDTH-1:0] b = 4'b0000;
  reg [WIDTH-1:0] bitwise_and;
  reg [WIDTH-1:0] bitwise_or;
  reg [WIDTH-1:0] bitwise_xor;
  integer i=0;
  // declaracion de eventos
  event a_ev;
  event b_ev;
  event and_ev;
  event process5_ev;
  event process4_ev;

 

  initial begin          // Proceso 1
    forever begin        // Debe llevar el forever si no, solo se ejecuta una vez
      @(posedge clk);    // El @ es un operador para esperar un evento
      std::randomize(a); // Randomizamos a utilizando la libreria standard
      ->a_ev;            // Triggers el evento por 1 timestep
    end
  end

 

  always begin            // Proceso 2
      @(posedge clk);    // El @ es un operador para esperar un evento
      std::randomize(b); // Randomizamos a utilizando la libreria standard
      ->b_ev;            // Triggers el evento por 1 timestep
      ->and_ev;          // Triggers el evento por 1 timestep
  end

 

  initial begin // Se ejecuta en t=0

 

    fork

 

      begin // Proceso 3
        repeat(5) begin
          @(posedge clk);    // El @ es un operador para esperar un evento
          wait(a_ev.triggered && process4_ev.triggered);// Esperar el trigger de la operacio aterior
          $display("a: %b", a); // Tercero a ser visto
        end
      end

 

      begin // Proceso 4
        repeat(5) begin
          @(posedge clk);    // El @ es un operador para esperar un evento
          wait(b_ev.triggered && process5_ev.triggered);// Esperar el trigger de la operacio aterior
          $display("b: %b", b); // Segundo a ser visto
          ->process4_ev; //dar seguimiento al proceso
        end
      end

 

      begin // Proceso 5
        repeat(5) begin
          @(posedge clk);    // El @ es un operador para esperar un evento
          wait(and_ev.triggered);
          $display("and: %b", bitwise_and); // Primero a ser visto
          -> process5_ev; //iniciar el proceso.
        end
      end

 

    join

 

  end

 

  // Proceso de la señal de reloj
  always #10ns clk=!clk;

 

  // instanciación del modulo y asingacion de entradas y salidas
  compuertas #(.WIDTH(4)) DUT (
    .a(a),
    .b(b),
    .bitwise_and(bitwise_xor),
    .bitwise_or(bitwise_or),
    .bitwise_xor(bitwise_and)
  );

 

  initial begin 
    $dumpfile("filel.vcd");
    $dumpvars;
  end

endmodule  
